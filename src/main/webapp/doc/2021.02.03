Server side 검증 ( validation )

1. Spring Validation
	 구현 방법 : interface validation 을 구현
	 
2. JST-303 ( regulation keeps to be updating and modifying )
	 어노테이션 이용 ==> command 객체에 적용
	 @NotNull
	 @Min, @Max
	 @Size (min, max)
	 @pattern(정규식)
	 
	 ==>
	 
1번 : 구체적으로 작성 가능, 복잡한 로직 검증 가능
2번 : 간단한 형태로만 검증 가능

resourceBundle 스프링 빈 등록

Container

	parent : Model
	
	child : Controller
	
1. resourceBundle 파일 준비 (error.properties...)
2. messaeSource 스프링 빈 등록 (reloadableResourceBundleMessageSource)
3. validator, controller에 validate 메소드 실행
4. 

spring aessage
spring message : <spring:message code="GREETING" arguments="brown" />


view Resolver : controller가 반환하는 view name 을 이용하여 해당 요청을 생성할 
				view 객체를 선택
				
복수의 view resolver 등록이 가능
view resolver의 우선순위를 설정하여 적용될 순서를 결정할 수 있다

기존 : interResourceViewResolver
추가 : BeanNameViewResolver
	=> 컨트롤러가 반환하는 view name과 동일한 이름의 스프링 빈이 오면
	   해당 스프링 빈을 view객체로 사용
	   

****** interResourceViewResolver 사용시 주의점
==> prefix, suffix 조합에 의해 생성된 문자열에 해당하는 리소스(jsp)가 없어도
   검증을 하지 않고 응답을내보낸다
   즉 파일이 존재하지 않을경우 404 에러발생
   
   ==> 우선순위를 가장 최 하위로 둔다
   
   parent	비즈니스 로직과 관련되면 부모 컨테이너에 bean을 등록한다
   child 	보통 자식 컨테이너에 Controller가 관련된 bean을 등록한다
   
   
ExcelDownloadView
 
1. ajax

2. excel 다운로드  

Interceptor / filter 차이점


















 